Both of 'distutils' and 'setuptools' all are the tool for installing and managing Python packages written in Python.

difference between 'distutils' and 'setuptools':

* distutils is still the standard tool for packaging in Python. 
  . It is the standard library of python (Python 2 and Python 3.0 to 3.3). 
  . It is useful for simple Python distributions, but lacks features. 
  . it introduces the distutils Python package that can be imported in your setup.py script.

  example:
     >>> import distutils
     >>> distutils.__file__
     '/usr/lib/python2.7/distutils/__init__.pyc'
     >>> distutils.__doc__
     'distutils\n\nThe main package for the Python Module Distribution Utilities. 
     Normally\nused from a setup script as\n\n  from distutils.core import setup\n\n   setup (...)\n'


* setuptools is a python project. It is an extensions to the 'distutils' for large or complex distributions
  . It is not a standard library of python. 
  . It introduced a command-line utility called easy_install. 
  . It also introduced the setuptools Python package that can be imported in your setup.py script, 
    and the pkg_resources Python package that can be imported in your code to locate data files 
    installed with a distribution. One of its gotchas is that it monkey-patches the distutils Python package. 
  . It should work well with pip.


# how to install python setuptools correctly on ubuntu:
* $wget https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py -O - | sudo python
or
* wget -q http://peak.telecommunity.com/dist/ez_setup.py
* python ez_setup.py

next:
when setuuptools is ready. which one should we use for package installation, "easy_install" or "pip"?

pip was originally written to improve on easy_install in the following ways:
.All packages are downloaded before installation. Partially-completed installation doesn’t occur as a result.
.Care is taken to present useful output on the console.
.The reasons for actions are kept track of. For instance, if a package is being installed, pip keeps track of why that package was required.
.Error messages should be useful.
.The code is relatively concise and cohesive, making it easier to use programmatically.
.Packages don’t have to be installed as egg archives, they can be installed flat (while keeping the egg metadata).
.Native support for other version control systems (Git, Mercurial and Bazaar)
.Uninstallation of packages.
.Simple to define fixed sets of requirements and reliably reproduce a set of packages.

pip doesn’t do everything that easy_install does. Specifically:
.It cannot install from eggs. It only installs from source. (In the future it would be good if it could install binaries from Windows .exe or .msi – binary install on other platforms is not a priority.)
.It is incompatible with some packages that extensively customize distutils or setuptools in their setup.py files.



#how to install pip correctly on ubuntu:
* $easy_install pip
or
* $curl https://raw.github.com/pypa/pip/master/contrib/get-pip.py | sudo python

